{"ast":null,"code":"var _jsxFileName = \"F:\\\\Progra\\\\gps-app\\\\frontend\\\\src\\\\Map.js\",\n  _s = $RefreshSig$();\n// src/Map.js\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './Map.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = 'AIzaSyAroIurW0UnnyU7b_n7RQtkxAb3Asmmb2A'; // Reemplaza con tu clave de API de Google\n\nconst Map = () => {\n  _s();\n  const [gpsPoints, setGpsPoints] = useState([]);\n  const [currentLocation, setCurrentLocation] = useState(null);\n  useEffect(() => {\n    // Obtener puntos GPS desde la base de datos\n    axios.get('http://localhost:5000/api/gps').then(response => {\n      setGpsPoints(response.data);\n    }).catch(error => {\n      console.error(\"Error al obtener los puntos GPS:\", error);\n    });\n\n    // Función para obtener la ubicación mediante la API de Google\n    const fetchLocationFromGoogle = () => {\n      axios.get(`https://www.googleapis.com/geolocation/v1/geolocate?key=${API_KEY}`).then(response => {\n        const {\n          lat,\n          lng\n        } = response.data.location;\n        const sent_at = new Date().toISOString();\n        const phone_identifier = \"telefono-123\";\n        setCurrentLocation({\n          latitude: lat,\n          longitude: lng\n        });\n\n        // Enviar la ubicación obtenida al backend\n        axios.post('http://localhost:5000/api/gps', {\n          latitude: lat,\n          longitude: lng,\n          sent_at,\n          phone_identifier\n        }).then(() => {\n          console.log('Punto GPS guardado');\n        }).catch(error => {\n          console.error(\"Error al guardar el punto GPS:\", error);\n        });\n      }).catch(error => {\n        console.error(\"Error al obtener la ubicación de Google:\", error);\n      });\n    };\n\n    // Intervalo para obtener y almacenar la ubicación periódicamente\n    const intervalId = setInterval(fetchLocationFromGoogle, 30000); // Cada 30 segundos\n\n    // Limpiar el intervalo cuando el componente se desmonte\n    return () => clearInterval(intervalId);\n  }, []);\n\n  // Ícono personalizado para el marcador\n  const customIcon = new L.Icon({\n    iconUrl: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n        <circle cx=\"12\" cy=\"5\" r=\"3\" fill=\"#ff6347\" />\n        <path d=\"M12 0c-4.41 0-8 3.59-8 8 0 4.89 6 12 6 12s2-3.3 4-6.6c2 3.3 4 6.6 4 6.6s6-7.11 6-12c0-4.41-3.59-8-8-8z\" fill=\"#ff6347\"/>\n      </svg>\n    `),\n    iconSize: [30, 40],\n    iconAnchor: [15, 40],\n    popupAnchor: [0, -40]\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: currentLocation ? [currentLocation.latitude, currentLocation.longitude] : [-34.6037, -58.3816],\n      zoom: 13,\n      style: {\n        width: '100%',\n        height: '100vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), gpsPoints.map(point => /*#__PURE__*/_jsxDEV(Marker, {\n        position: [point.latitude, point.longitude],\n        icon: customIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tel\\xE9fono:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), \" \", point.phone_identifier, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 67\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Hora de env\\xEDo:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), \" \", new Date(point.sent_at).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)\n      }, point.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)), currentLocation && /*#__PURE__*/_jsxDEV(Marker, {\n        position: [currentLocation.latitude, currentLocation.longitude],\n        icon: customIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: \"Tu ubicaci\\xF3n actual\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"sgfxET9Ey0Qmnn8R0daNNJnat14=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Popup","L","axios","jsxDEV","_jsxDEV","API_KEY","Map","_s","gpsPoints","setGpsPoints","currentLocation","setCurrentLocation","get","then","response","data","catch","error","console","fetchLocationFromGoogle","lat","lng","location","sent_at","Date","toISOString","phone_identifier","latitude","longitude","post","log","intervalId","setInterval","clearInterval","customIcon","Icon","iconUrl","encodeURIComponent","iconSize","iconAnchor","popupAnchor","className","children","center","zoom","style","width","height","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","map","point","position","icon","toLocaleString","id","_c","$RefreshReg$"],"sources":["F:/Progra/gps-app/frontend/src/Map.js"],"sourcesContent":["// src/Map.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './Map.css';\r\nimport axios from 'axios';\r\n\r\nconst API_KEY = 'AIzaSyAroIurW0UnnyU7b_n7RQtkxAb3Asmmb2A'; // Reemplaza con tu clave de API de Google\r\n\r\nconst Map = () => {\r\n  const [gpsPoints, setGpsPoints] = useState([]);\r\n  const [currentLocation, setCurrentLocation] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Obtener puntos GPS desde la base de datos\r\n    axios.get('http://localhost:5000/api/gps')\r\n      .then(response => {\r\n        setGpsPoints(response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error al obtener los puntos GPS:\", error);\r\n      });\r\n\r\n    // Función para obtener la ubicación mediante la API de Google\r\n    const fetchLocationFromGoogle = () => {\r\n      axios.get(`https://www.googleapis.com/geolocation/v1/geolocate?key=${API_KEY}`)\r\n        .then(response => {\r\n          const { lat, lng } = response.data.location;\r\n          const sent_at = new Date().toISOString();\r\n          const phone_identifier = \"telefono-123\";\r\n\r\n          setCurrentLocation({ latitude: lat, longitude: lng });\r\n\r\n          // Enviar la ubicación obtenida al backend\r\n          axios.post('http://localhost:5000/api/gps', {\r\n            latitude: lat,\r\n            longitude: lng,\r\n            sent_at,\r\n            phone_identifier\r\n          })\r\n          .then(() => {\r\n            console.log('Punto GPS guardado');\r\n          })\r\n          .catch(error => {\r\n            console.error(\"Error al guardar el punto GPS:\", error);\r\n          });\r\n        })\r\n        .catch(error => {\r\n          console.error(\"Error al obtener la ubicación de Google:\", error);\r\n        });\r\n    };\r\n\r\n    // Intervalo para obtener y almacenar la ubicación periódicamente\r\n    const intervalId = setInterval(fetchLocationFromGoogle, 30000); // Cada 30 segundos\r\n\r\n    // Limpiar el intervalo cuando el componente se desmonte\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  // Ícono personalizado para el marcador\r\n  const customIcon = new L.Icon({\r\n    iconUrl: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\r\n        <circle cx=\"12\" cy=\"5\" r=\"3\" fill=\"#ff6347\" />\r\n        <path d=\"M12 0c-4.41 0-8 3.59-8 8 0 4.89 6 12 6 12s2-3.3 4-6.6c2 3.3 4 6.6 4 6.6s6-7.11 6-12c0-4.41-3.59-8-8-8z\" fill=\"#ff6347\"/>\r\n      </svg>\r\n    `),\r\n    iconSize: [30, 40],\r\n    iconAnchor: [15, 40],\r\n    popupAnchor: [0, -40],\r\n  });\r\n\r\n  return (\r\n    <div className=\"map-container\">\r\n      <MapContainer\r\n        center={currentLocation ? [currentLocation.latitude, currentLocation.longitude] : [-34.6037, -58.3816]}\r\n        zoom={13}\r\n        style={{ width: '100%', height: '100vh' }}\r\n      >\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n\r\n        {gpsPoints.map((point) => (\r\n          <Marker\r\n            key={point.id}\r\n            position={[point.latitude, point.longitude]}\r\n            icon={customIcon}\r\n          >\r\n            <Popup>\r\n              <strong>Teléfono:</strong> {point.phone_identifier} <br />\r\n              <strong>Hora de envío:</strong> {new Date(point.sent_at).toLocaleString()}\r\n            </Popup>\r\n          </Marker>\r\n        ))}\r\n\r\n        {currentLocation && (\r\n          <Marker position={[currentLocation.latitude, currentLocation.longitude]} icon={customIcon}>\r\n            <Popup>Tu ubicación actual</Popup>\r\n          </Marker>\r\n        )}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}