{"ast":null,"code":"var _jsxFileName = \"F:\\\\Progra\\\\gps-app\\\\frontend\\\\src\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport './Map.css'; // Asegúrate de importar el archivo CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = () => {\n  _s();\n  const [gpsPoints, setGpsPoints] = useState([]);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchGpsPoints = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/gps');\n        const data = await response.json();\n        setGpsPoints(data);\n      } catch (err) {\n        setError('Hubo un error al cargar los puntos GPS. Intenta nuevamente.');\n      }\n    };\n    fetchGpsPoints();\n  }, []);\n  const containerStyle = {\n    width: 'calc(100% - 160px)',\n    // 100% del ancho menos 80px en ambos lados\n    height: '100vh',\n    margin: '0 80px' // Margen de 80px en ambos lados\n  };\n  const center = {\n    lat: 51.505,\n    lng: -0.09\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '20px',\n        left: '50%',\n        transform: 'translateX(-50%)',\n        padding: '10px',\n        backgroundColor: '#f44336',\n        color: 'white',\n        borderRadius: '5px'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: \"YOUR_GOOGLE_MAPS_API_KEY\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: center,\n        zoom: 13,\n        children: gpsPoints.length > 0 ? gpsPoints.map(point => /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: point.latitude,\n            lng: point.longitude\n          }\n        }, point.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            color: 'gray'\n          },\n          children: \"No hay puntos GPS disponibles.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"QSsayCwH9/ihOMwxX/ryggF5oPE=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","LoadScript","Marker","jsxDEV","_jsxDEV","Map","_s","gpsPoints","setGpsPoints","error","setError","fetchGpsPoints","response","fetch","data","json","err","containerStyle","width","height","margin","center","lat","lng","className","children","style","position","top","left","transform","padding","backgroundColor","color","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","googleMapsApiKey","mapContainerStyle","zoom","length","map","point","latitude","longitude","id","_c","$RefreshReg$"],"sources":["F:/Progra/gps-app/frontend/src/Map.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\r\nimport './Map.css'; // Asegúrate de importar el archivo CSS\r\n\r\nconst Map = () => {\r\n  const [gpsPoints, setGpsPoints] = useState([]);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchGpsPoints = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/gps');\r\n        const data = await response.json();\r\n        setGpsPoints(data);\r\n      } catch (err) {\r\n        setError('Hubo un error al cargar los puntos GPS. Intenta nuevamente.');\r\n      }\r\n    };\r\n\r\n    fetchGpsPoints();\r\n  }, []);\r\n\r\n  const containerStyle = {\r\n    width: 'calc(100% - 160px)',  // 100% del ancho menos 80px en ambos lados\r\n    height: '100vh',\r\n    margin: '0 80px',  // Margen de 80px en ambos lados\r\n  };\r\n\r\n  const center = {\r\n    lat: 51.505,\r\n    lng: -0.09,\r\n  };\r\n\r\n  return (\r\n    <div className=\"map-container\">\r\n      {error && (\r\n        <div style={{ position: 'absolute', top: '20px', left: '50%', transform: 'translateX(-50%)', padding: '10px', backgroundColor: '#f44336', color: 'white', borderRadius: '5px' }}>\r\n          {error}\r\n        </div>\r\n      )}\r\n      <LoadScript googleMapsApiKey=\"YOUR_GOOGLE_MAPS_API_KEY\">\r\n        <GoogleMap\r\n          mapContainerStyle={containerStyle}\r\n          center={center}\r\n          zoom={13}\r\n        >\r\n          {gpsPoints.length > 0 ? (\r\n            gpsPoints.map((point) => (\r\n              <Marker\r\n                key={point.id}\r\n                position={{\r\n                  lat: point.latitude,\r\n                  lng: point.longitude,\r\n                }}\r\n              />\r\n            ))\r\n          ) : (\r\n            <div style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', color: 'gray' }}>\r\n              No hay puntos GPS disponibles.\r\n            </div>\r\n          )}\r\n        </GoogleMap>\r\n      </LoadScript>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}