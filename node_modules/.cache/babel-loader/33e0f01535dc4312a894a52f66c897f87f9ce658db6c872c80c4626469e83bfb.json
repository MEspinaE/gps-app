{"ast":null,"code":"var _jsxFileName = \"F:\\\\Progra\\\\gps-app\\\\frontend\\\\src\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\n\n// Asegúrate de reemplazar con tu clave de API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = 'AIzaSyAroIurW0UnnyU7b_n7RQtkxAb3Asmmb2A';\nconst Map = () => {\n  _s();\n  const [gpsPoints, setGpsPoints] = useState([]);\n  const [selectedPoint, setSelectedPoint] = useState(null);\n\n  // Cargar los puntos GPS\n  useEffect(() => {\n    // Suponiendo que tienes una API para obtener los puntos GPS\n    fetch('/api/gps-points').then(response => response.json()).then(data => setGpsPoints(data)).catch(error => console.error('Error fetching GPS points:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: API_KEY,\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      id: \"map\",\n      mapContainerStyle: {\n        height: '400px',\n        width: '100%'\n      },\n      zoom: 10,\n      center: {\n        lat: -33.5642624,\n        lng: -70.6215936\n      } // Coordenadas iniciales\n      ,\n      children: gpsPoints.map(point => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: point.latitude,\n          lng: point.longitude\n        },\n        onClick: () => setSelectedPoint(point),\n        children: (selectedPoint === null || selectedPoint === void 0 ? void 0 : selectedPoint.id) === point.id && /*#__PURE__*/_jsxDEV(InfoWindow, {\n          position: {\n            lat: point.latitude,\n            lng: point.longitude\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Tel\\xE9fono:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 19\n            }, this), \" \", point.phone_identifier, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 71\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Hora de env\\xEDo:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 19\n            }, this), \" \", new Date(point.sent_at).toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }, this)\n      }, point.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"UHVXSQcS7j+lX/nCpmFXdCQrPqA=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","LoadScript","Marker","InfoWindow","jsxDEV","_jsxDEV","API_KEY","Map","_s","gpsPoints","setGpsPoints","selectedPoint","setSelectedPoint","fetch","then","response","json","data","catch","error","console","googleMapsApiKey","children","id","mapContainerStyle","height","width","zoom","center","lat","lng","map","point","position","latitude","longitude","onClick","fileName","_jsxFileName","lineNumber","columnNumber","phone_identifier","Date","sent_at","toLocaleString","_c","$RefreshReg$"],"sources":["F:/Progra/gps-app/frontend/src/Map.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\r\n\r\n// Asegúrate de reemplazar con tu clave de API\r\nconst API_KEY = 'AIzaSyAroIurW0UnnyU7b_n7RQtkxAb3Asmmb2A';\r\n\r\nconst Map = () => {\r\n  const [gpsPoints, setGpsPoints] = useState([]);\r\n  const [selectedPoint, setSelectedPoint] = useState(null);\r\n\r\n  // Cargar los puntos GPS\r\n  useEffect(() => {\r\n    // Suponiendo que tienes una API para obtener los puntos GPS\r\n    fetch('/api/gps-points') \r\n      .then((response) => response.json())\r\n      .then((data) => setGpsPoints(data))\r\n      .catch((error) => console.error('Error fetching GPS points:', error));\r\n  }, []);\r\n\r\n  return (\r\n    <LoadScript googleMapsApiKey={API_KEY}>\r\n      <GoogleMap\r\n        id=\"map\"\r\n        mapContainerStyle={{ height: '400px', width: '100%' }}\r\n        zoom={10}\r\n        center={{ lat: -33.5642624, lng: -70.6215936 }} // Coordenadas iniciales\r\n      >\r\n        {gpsPoints.map((point) => (\r\n          <Marker\r\n            key={point.id}\r\n            position={{ lat: point.latitude, lng: point.longitude }}\r\n            onClick={() => setSelectedPoint(point)}\r\n          >\r\n            {selectedPoint?.id === point.id && (\r\n              <InfoWindow position={{ lat: point.latitude, lng: point.longitude }}>\r\n                <div>\r\n                  <strong>Teléfono:</strong> {point.phone_identifier} <br />\r\n                  <strong>Hora de envío:</strong> {new Date(point.sent_at).toLocaleString()}\r\n                </div>\r\n              </InfoWindow>\r\n            )}\r\n          </Marker>\r\n        ))}\r\n      </GoogleMap>\r\n    </LoadScript>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}